package main

import (
	"flag" // 新增导入
	"log"
	"os"
	"time"

	"github.com/hysios/nginxcert/internal/certificate"
	"github.com/hysios/nginxcert/internal/nginx"
	"github.com/hysios/nginxcert/internal/updater"
)

func main() {
	// 1. 增加 flag 参数
	author := flag.String("author", "", "Author of the certificates")           // 新增 flag 参数
	defaultSSLPath := flag.String("ssl-path", "", "Default SSL path")           // 新增 flag 参数
	config := flag.String("config-path", "", "Nginx config path")               // 新增 flag 参数
	validity := flag.Int("validity", 90, "Validity period of the certificates") // 新增 flag 参数
	flag.Parse()                                                                // 解析命令行参数

	configDir := *config
	// config sslpath author 不能为空
	if configDir == "" || *defaultSSLPath == "" || *author == "" {
		flag.Usage()
		os.Exit(1)
	}

	// 1. 解析Nginx配置
	domains, err := nginx.ParseConfigs(configDir)
	if err != nil {
		log.Fatalf("Failed to parse Nginx configs: %v", err)
	}

	user := &certificate.MyUser{
		Email: *author,
	}
	// 2. 为每个域名生成证书
	for _, domain := range domains {
		if !domain.SignTime.IsZero() && time.Since(domain.SignTime) < time.Duration(*validity-3)*24*time.Hour {
			log.Printf("Certificate for %s already exists and is valid for another %d days", domain, *validity-3)
			continue
		}

		_, _, err := certificate.GenerateCertificate(user, *defaultSSLPath, &domain)
		if err != nil {
			log.Printf("Failed to generate certificate for %s: %v", domain, err)
			continue
		}

		if domain.ConfigPath == "" {
			continue
		}

		// 3. 更新Nginx配置
		err = updater.UpdateCertificatePaths(domain)
		if err != nil {
			log.Printf("Failed to update config for %s: %v", domain, err)
		}
	}

	log.Printf("Certificates generated by: %s", *author) // 输出作者信息
	log.Println("Certificate renewal process completed")
}
